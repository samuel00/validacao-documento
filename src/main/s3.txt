import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;

@Component
public class S3DownloadJob {

    private final AmazonS3 amazonS3;

    @Value("${app.s3.bucket}")
    private String bucketName;

    @Value("${app.s3.key}")
    private String s3Key;

    @Value("${app.file.path}")
    private String localFilePath;

    public S3DownloadJob(AmazonS3 amazonS3) {
        this.amazonS3 = amazonS3;
    }

    @Scheduled(cron = "0 0 8 * * ?")
    public void downloadFileFromS3() {
        System.out.println("Iniciando download do S3 às " + LocalDateTime.now());

        // Criar o diretório de destino, se não existir
        File file = new File(localFilePath);
        File parentDir = file.getParentFile();
        if (!parentDir.exists() && !parentDir.mkdirs()) {
            System.err.println("Falha ao criar o diretório: " + parentDir.getAbsolutePath());
            return;
        }

        try {
            // Configurar o request para buscar o arquivo no S3
            GetObjectRequest getObjectRequest = new GetObjectRequest(bucketName, s3Key);

            // Fazer o download do arquivo em streaming
            try (S3Object s3Object = amazonS3.getObject(getObjectRequest);
                 S3ObjectInputStream s3InputStream = s3Object.getObjectContent();
                 FileOutputStream fos = new FileOutputStream(file)) {
                byte[] buffer = new byte[8192]; // Buffer de 8 KB
                int bytesRead;
                long totalBytesRead = 0;
                while ((bytesRead = s3InputStream.read(buffer)) != -1) {
                    fos.write(buffer, 0, bytesRead);
                    totalBytesRead += bytesRead;
                    if (totalBytesRead % (1024 * 1024 * 10) == 0) { // A cada 10 MB
                        System.out.println("Baixados " + (totalBytesRead / (1024 * 1024)) + " MB");
                    }
                }
            }

            System.out.println("Arquivo .onnx baixado do S3 e salvo em: " + file.getAbsolutePath() + " às " + LocalDateTime.now());
        } catch (IOException e) {
            System.err.println("Erro ao baixar o arquivo do S3: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Erro inesperado: " + e.getMessage());
        }
    }

    public String getLocalFilePath() {
        return localFilePath;
    }
}



public void processOnnxModel() {
        System.out.println("Iniciando processamento do modelo .onnx às " + LocalDateTime.now());

        // Obter o caminho do arquivo baixado
        String filePath = s3DownloadJob.getLocalFilePath();
        File file = new File(filePath);

        // Verificar se o arquivo existe
        if (!file.exists()) {
            System.err.println("Arquivo .onnx não encontrado: " + filePath);
            return;
        }

        // Carregar e usar o modelo .onnx
        try (OrtEnvironment env = OrtEnvironment.getEnvironment();
             OrtSession session = env.createSession(filePath)) {

            // Exibir informações do modelo (opcional)
            System.out.println("Entradas do modelo: " + session.getInputNames());
            System.out.println("Saídas do modelo: " + session.getOutputNames());

            // Preparar dados de entrada para inferência (exemplo)
            // Substitua isso pelos dados reais que seu modelo espera
            float[] inputData = new float[]{1.0f, 2.0f, 3.0f, 4.0f}; // Exemplo de entrada
            long[] inputShape = new long[]{1, inputData.length}; // Exemplo de formato [batch_size, features]
            try (OnnxTensor inputTensor = OnnxTensor.createTensor(env, FloatBuffer.wrap(inputData), inputShape)) {
                Map<String, OnnxTensor> inputs = new HashMap<>();
                String inputName = session.getInputNames().iterator().next(); // Pega o nome da primeira entrada
                inputs.put(inputName, inputTensor);

                // Fazer a inferência
                try (OrtSession.Result results = session.run(inputs)) {
                    String outputName = session.getOutputNames().iterator().next(); // Pega o nome da primeira saída
                    float[] outputData = (float[]) results.get(outputName).getValue();
                    System.out.println("Resultado da inferência: ");
                    for (float value : outputData) {
                        System.out.print(value + " ");
                    }
                    System.out.println();
                }
            }

            System.out.println("Modelo .onnx processado com sucesso às " + LocalDateTime.now());
        } catch (OrtException e) {
            System.err.println("Erro ao carregar ou usar o modelo .onnx: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Erro inesperado: " + e.getMessage());
        }
    }







app.s3.bucket=seu-bucket
app.s3.key=caminho/do/modelo.onnx
app.file.path=/caminho/local/modelo.onnx



aws --profile localstack --endpoint-url=http://localhost:4566 s3 mb s3://meu-bucket-local
aws --endpoint-url=http://localhost:4566 s3 mb s3://meu-bucket-local


aws --profile localstack --endpoint-url=http://localhost:4566 s3 cp testfile.onnx s3://meu-bucket-local/caminho/do/testfile.onnx

# No Linux/Mac
dd if=/dev/zero of=testfile.onnx bs=1M count=1
# Isso cria um arquivo de 1 MB chamado testfile.onnx

# No Windows (usando PowerShell)
$size = 1MB
[IO.File]::WriteAllBytes("testfile.onnx", (new-object byte[] $size))